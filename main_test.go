package iabtcf

import (
	"testing"
)

// all consent strings generated by: https://iabtcf.com/#/encode
func TestParseCoreString(t *testing.T) {
	tests := []struct {
		name                       string
		c                          string
		wantPurposesAllowed        bool
		wantSpecialFeaturesAllowed bool
		wantVendorAllowed          bool
		publisherCountry           string
		wantErr                    bool
	}{
		{
			"empty",
			"",
			true,
			true,
			true,
			"AA",
			true,
		},
		{
			"10 purposes and 2 special features allowed, vendor allowed",
			"COwIsAvOwIsAvBIAAAENAPCMAP_AAP_AAAAAFoQBQABAAGAAQAAwACQAAAAA.IFoEUQQgAIQwgIwQABAEAAAAOIAACAIAAAAQAIAgEAACEAAAAAgAQBAAAAAAAGBAAgAAAAAAAFAAECAAAgAAQARAEQAAAAAJAAIAAgAAAYQEAAAQmAgBC3ZAYzUw",
			true,
			true,
			true,
			"AA",
			false,
		},
		{
			"only 5 purposes and 1 special feature allowed, vendor not allowed",
			"COwIsAvOwIsAvBIAAAENAPCIAPgAAP_AAAAAFoEUQQgAIQwgIwQABAEAAAAOIAACAIAAAAQAIAgEAACEAAAAAgAQBAAAAAAAGBAAgAAAAAAAFAAECAAAgAAQARAEQAAAAAJAAIAAgAAAYQEAAAQmAgBC3ZAYzUwAAAAA.IFoEUQQgAIQwgIwQABAEAAAAOIAACAIAAAAQAIAgEAACEAAAAAgAQBAAAAAAAGBAAgAAAAAAAFAAECAAAgAAQARAEQAAAAAJAAIAAgAAAYQEAAAQmAgBC3ZAYzUw",
			false,
			false,
			false,
			"AA",
			false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			// Arrange
			purposes := []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}
			specialFeatures := []int{1, 2}
			vendor := 4

			// Act
			got, err := ParseCoreString(tt.c)

			// Assert
			if (err != nil) != tt.wantErr {
				t.Errorf("ParseCoreString() error = %v, wantErr %v", err, tt.wantErr)
			}
			if err != nil {
				return
			}

			if pa := got.EveryPurposeAllowed(purposes); pa != tt.wantPurposesAllowed {
				t.Errorf("EveryPurposeAllowed failed. Expected %t, got %t", tt.wantPurposesAllowed, pa)
			}
			if sfa := got.EverySpecialFeatureAllowed(specialFeatures); sfa != tt.wantSpecialFeaturesAllowed {
				t.Errorf("EverySpecialFeatureAllowed failed. Expected %t, got %t", tt.wantSpecialFeaturesAllowed, sfa)
			}
			if va := got.VendorAllowed(vendor); va != tt.wantVendorAllowed {
				t.Errorf("VendorAllowed failed. Expected %t, got %t. \nIsRangeEncoding: %t\nVendors: %#v", tt.wantVendorAllowed, va, got.IsRangeEncoding, got.ConsentedVendors)
			}
			if pc := got.PublisherCC; pc != tt.publisherCountry {
				t.Errorf("publisherCountry failed. Expected %s, got %s", tt.publisherCountry, pc)
			}
		})
	}
}
